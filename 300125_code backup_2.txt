import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from PIL import Image, ImageTk
import os
import json
import requests
from io import BytesIO
import webbrowser

# Directory to store recipes
if not os.path.exists("data"):
    os.makedirs("data")

RECIPE_FILE = "data/recipes.json"

# Load recipes from file
if os.path.exists(RECIPE_FILE):
    with open(RECIPE_FILE, "r") as file:
        recipes = json.load(file)
else:
    recipes = []

# Save recipes to file
def save_recipes():
    with open(RECIPE_FILE, "w") as file:
        json.dump(recipes, file, indent=4)

# Main Application
class MyCookBook:
    def __init__(self, root):
        self.root = root
        self.root.title("MyCookBook")

        # Category Buttons Frame
        self.category_frame = ttk.Frame(root)
        self.category_frame.pack(side=tk.TOP, fill=tk.X, pady=10)

        self.categories = ["All recipes", "Desserts", "Bread", "Soups", "Salads", "Pasta", "Stews"]
        self.category_buttons = {}
        for category in self.categories:
            button = ttk.Button(self.category_frame, text=category, command=lambda c=category: self.filter_recipes(c))
            button.pack(side=tk.LEFT, padx=5)
            self.category_buttons[category] = button

        # Recipe List Frame
        self.recipe_list_frame = ttk.Frame(root)
        self.recipe_list_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.recipe_listbox = tk.Listbox(self.recipe_list_frame, height=20, width=40)
        self.recipe_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.recipe_listbox.bind("<Double-1>", self.view_recipe)

        self.scrollbar = ttk.Scrollbar(self.recipe_list_frame, orient=tk.VERTICAL, command=self.recipe_listbox.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.recipe_listbox.config(yscrollcommand=self.scrollbar.set)

        # Buttons Frame
        self.buttons_frame = ttk.Frame(root)
        self.buttons_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        self.add_button = ttk.Button(self.buttons_frame, text="Add Recipe", command=self.add_recipe)
        self.add_button.pack(pady=10)

        self.view_button = ttk.Button(self.buttons_frame, text="View Recipe", command=self.view_recipe)
        self.view_button.pack(pady=10)

        self.edit_button = ttk.Button(self.buttons_frame, text="Edit Recipe", command=self.edit_recipe)
        self.edit_button.pack(pady=10)

        self.delete_button = ttk.Button(self.buttons_frame, text="Delete Recipe", command=self.delete_recipe)
        self.delete_button.pack(pady=10)

        self.export_button = ttk.Button(self.buttons_frame, text="Export Recipe", command=self.export_recipe)
        self.export_button.pack(pady=10)

        # Initialize filtered category to show all recipes
        self.filtered_category = "All recipes"
        self.update_recipe_list()
        
    def get_recipe_index(self, selected_index):
        if self.filtered_category == "All recipes":
            return selected_index[0]
        else:
            filtered_recipes = [r for r in recipes if r["category"] == self.filtered_category]
            return recipes.index(filtered_recipes[selected_index[0]])

    def filter_recipes(self, category):
        self.filtered_category = category
        self.update_recipe_list()

    def update_recipe_list(self):
        self.recipe_listbox.delete(0, tk.END)
        if self.filtered_category == "All recipes":
            filtered_recipes = recipes
        else:
            filtered_recipes = [r for r in recipes if r["category"] == self.filtered_category]
        for recipe in filtered_recipes:
            self.recipe_listbox.insert(tk.END, recipe["name"])

    def add_recipe(self):
        AddRecipeWindow(self)

    def view_recipe(self, event=None):
        selected_index = self.recipe_listbox.curselection()
        if selected_index:
            recipe_index = self.get_recipe_index(selected_index)
            ViewRecipeWindow(self, recipe_index)
        else:
            messagebox.showinfo("Info", "Please select a recipe to view")

    def edit_recipe(self):
        selected_index = self.recipe_listbox.curselection()
        if selected_index:
            recipe_index = self.get_recipe_index(selected_index)
            EditRecipeWindow(self, recipe_index)
        else:
            messagebox.showinfo("Info", "Please select a recipe to edit")

    def delete_recipe(self):
        selected_index = self.recipe_listbox.curselection()
        if selected_index:
            recipe_index = self.get_recipe_index(selected_index)
            del recipes[recipe_index]
            save_recipes()
            self.update_recipe_list()
            messagebox.showinfo("Success", "Recipe deleted successfully")
        else:
            messagebox.showinfo("Info", "Please select a recipe to delete")

    def export_recipe(self):
        selected_index = self.recipe_listbox.curselection()
        if selected_index:
            recipe_index = self.get_recipe_index(selected_index)
            recipe = recipes[recipe_index]
            file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
            if file_path:
                with open(file_path, "w", encoding="utf-8") as file:
                    file.write(f"Recipe: {recipe['name']}\n\n")
                    file.write(f"Category: {recipe['category']}\n\n")
                    file.write(f"Instructions:\n{recipe['instructions']}\n\n")
                    file.write(f"Ingredients:\n{recipe['ingredients']}\n\n")
                    file.write(f"Recipe link: {recipe['video_link']}\n\n")
                    file.write(f"Image: {recipe['image']}\n\n")
                    file.write("Comments:\n")
                    for comment in recipe['comments']:
                        file.write(f"- {comment}\n")
            messagebox.showinfo("Success", f"Recipe exported to {file_path}")
        else:
            messagebox.showinfo("Info", "Please select a recipe to export")


class AddRecipeWindow:
    def __init__(self, app):
        self.app = app
        self.window = tk.Toplevel()
        self.window.title("Add Recipe")

        ttk.Label(self.window, text="Recipe Name:").grid(row=0, column=0, padx=10, pady=5)
        self.name_entry = ttk.Entry(self.window, width=30, justify="left")
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)

        ttk.Label(self.window, text="Category:").grid(row=1, column=0, padx=10, pady=5)
        self.category_combobox = ttk.Combobox(self.window, values=self.app.categories, state="read only", width=28)
        self.category_combobox.grid(row=1, column=1, padx=10, pady=5)
        self.category_combobox.set(self.app.categories[0])

        ttk.Label(self.window, text="Ingredients:").grid(row=2, column=0, padx=10, pady=5)
        self.ingredients_text = tk.Text(self.window, width=30, height=5, wrap=tk.WORD)
        self.ingredients_text.grid(row=2, column=1, padx=10, pady=5)

        ttk.Label(self.window, text="Instructions:").grid(row=3, column=0, padx=10, pady=5)
        self.instructions_text = tk.Text(self.window, width=30, height=10, wrap=tk.WORD)
        self.instructions_text.grid(row=3, column=1, padx=10, pady=5)

        ttk.Label(self.window, text="Recipe link:").grid(row=4, column=0, padx=10, pady=5)
        self.video_entry = ttk.Entry(self.window, width=30)
        self.video_entry.grid(row=4, column=1, padx=10, pady=5)

        ttk.Label(self.window, text="Image:").grid(row=5, column=0, padx=10, pady=5)
        self.image_path = tk.StringVar()
        self.image_entry = ttk.Entry(self.window, textvariable=self.image_path, width=30)
        self.image_entry.grid(row=5, column=1, padx=10, pady=5)
        ttk.Label(self.window, text="(File path or URL)").grid(row=5, column=2, padx=5, pady=5)

        # Updated Comments Section
        ttk.Label(self.window, text="Comments:").grid(row=6, column=0, padx=10, pady=5)
        self.comments_text = tk.Text(self.window, width=30, height=5, wrap=tk.WORD)
        self.comments_text.grid(row=6, column=1, padx=10, pady=5)

        ttk.Button(self.window, text="Save Recipe", command=self.save_recipe).grid(row=7, column=1, pady=10)

    def save_recipe(self):
        name = self.name_entry.get()
        category = self.category_combobox.get()
        instructions = self.instructions_text.get("1.0", tk.END).strip()
        ingredients = self.ingredients_text.get("1.0", tk.END).strip()
        video_link = self.video_entry.get().strip()
        image = self.image_path.get()
        comments = self.comments_text.get("1.0", tk.END).strip()

        if not name:
            messagebox.showerror("Error", "Recipe name is required.")
            return

        # Check if the video link is duplicated and fix it
        if video_link.count("https://") > 1:
            video_link = video_link.split("https://")[1]
            video_link = "https://" + video_link

        recipe = {
            "name": name,
            "category": category,
            "instructions": instructions,
            "ingredients": ingredients,
            "video_link": video_link,
            "image": image,
            "comments": [comments] if comments else []
        }
        recipes.append(recipe)
        save_recipes()
        self.app.update_recipe_list()
        self.window.destroy()
        messagebox.showinfo("Success", "Recipe added successfully.")

class EditRecipeWindow:
    def __init__(self, app, recipe_index):
        self.app = app
        self.recipe_index = recipe_index
        self.recipe = recipes[recipe_index]

        self.window = tk.Toplevel()
        self.window.title(f"Edit Recipe: {self.recipe['name']}")

        ttk.Label(self.window, text="Recipe Name:").grid(row=0, column=0, padx=10, pady=5)
        self.name_entry = ttk.Entry(self.window, width=30)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)
        self.name_entry.insert(0, self.recipe["name"])

        ttk.Label(self.window, text="Category:").grid(row=1, column=0, padx=10, pady=5)
        self.category_combobox = ttk.Combobox(self.window, values=self.app.categories, state="readonly", width=28)
        self.category_combobox.grid(row=1, column=1, padx=10, pady=5)
        self.category_combobox.set(self.recipe["category"])

        ttk.Label(self.window, text="Ingredients:").grid(row=2, column=0, padx=10, pady=5)
        self.ingredients_text = tk.Text(self.window, width=30, height=5, wrap=tk.WORD)
        self.ingredients_text.grid(row=2, column=1, padx=10, pady=5)
        self.ingredients_text.insert(tk.END, self.recipe["ingredients"])

        ttk.Label(self.window, text="Instructions:").grid(row=3, column=0, padx=10, pady=5)
        self.instructions_text = tk.Text(self.window, width=30, height=10, wrap=tk.WORD)
        self.instructions_text.grid(row=3, column=1, padx=10, pady=5)
        self.instructions_text.insert(tk.END, self.recipe["instructions"])

        ttk.Label(self.window, text="Recipe link (Optional):").grid(row=4, column=0, padx=10, pady=5)
        self.video_entry = ttk.Entry(self.window, width=30)
        self.video_entry.grid(row=4, column=1, padx=10, pady=5)
        self.video_entry.insert(0, self.recipe["video_link"])

        ttk.Label(self.window, text="Image (Optional):").grid(row=5, column=0, padx=10, pady=5)
        self.image_path = tk.StringVar()
        self.image_entry = ttk.Entry(self.window, textvariable=self.image_path, width=30)
        self.image_entry.grid(row=5, column=1, padx=10, pady=5)
        self.image_entry.insert(0, self.recipe["image"])

        ttk.Label(self.window, text="Comments (Optional):").grid(row=6, column=0, padx=10, pady=5)
        self.comments_text = tk.Text(self.window, width=30, height=5, wrap=tk.WORD)
        self.comments_text.grid(row=6, column=1, padx=10, pady=5)
        self.comments_text.insert(tk.END, "\n".join(self.recipe["comments"]))

        ttk.Button(self.window, text="Save Changes", command=self.save_changes).grid(row=7, column=1, pady=10)

    def save_changes(self):
        name = self.name_entry.get()
        category = self.category_combobox.get()
        instructions = self.instructions_text.get("1.0", tk.END).strip()
        ingredients = self.ingredients_text.get("1.0", tk.END).strip()
        video_link = self.video_entry.get().strip()
        image = self.image_path.get()
        comments = self.comments_text.get("1.0", tk.END).strip().split("\n")

        if not name:
            messagebox.showerror("Error", "Recipe name is required.")
            return

        # Update the recipe with the new information
        updated_recipe = {
            "name": name,
            "category": category,
            "instructions": instructions,
            "ingredients": ingredients,
            "video_link": video_link,
            "image": image,
            "comments": comments
        }
        recipes[self.recipe_index] = updated_recipe
        save_recipes()
        self.app.update_recipe_list()
        self.window.destroy()
        messagebox.showinfo("Success", "Recipe updated successfully.")

class ViewRecipeWindow:
    def __init__(self, app, recipe_index):
        self.app = app
        self.recipe = recipes[recipe_index]
        self.recipe_index = recipe_index

        self.window = tk.Toplevel()
        self.window.title(self.recipe["name"])

        # Create a canvas with scrollbar
        self.canvas = tk.Canvas(self.window)
        self.scrollbar = ttk.Scrollbar(self.window, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)

        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(
                scrollregion=self.canvas.bbox("all")
            )
        )

        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)

        # Add recipe content to the scrollable frame
        ttk.Label(self.scrollable_frame, text="Category:").grid(row=0, column=0, padx=10, pady=5, sticky="e")
        ttk.Label(self.scrollable_frame, text=self.recipe["category"]).grid(row=0, column=1, padx=10, pady=5, sticky="w")

        # Ingredients 
        ttk.Label(self.scrollable_frame, text="Ingredients:").grid(row=1, column=0, padx=10, pady=5, sticky="ne")
        ingredients_label = ttk.Label(self.scrollable_frame, text=self.recipe["ingredients"], wraplength=400)
        ingredients_label.grid(row=1, column=1, padx=10, pady=5, sticky="w")

        # Instructions 
        ttk.Label(self.scrollable_frame, text="Instructions:").grid(row=2, column=0, padx=10, pady=5, sticky="ne")
        instructions_label = ttk.Label(self.scrollable_frame, text=self.recipe["instructions"], wraplength=400)
        instructions_label.grid(row=2, column=1, padx=10, pady=5, sticky="w")

        ttk.Label(self.scrollable_frame, text="Recipe link:").grid(row=3, column=0, padx=10, pady=5, sticky="e")
        video_link = self.recipe["video_link"]
        if video_link:
            clickable_link = tk.Label(self.scrollable_frame, text=video_link, fg="blue", cursor="hand2")
            clickable_link.grid(row=3, column=1, padx=10, pady=5, sticky="w")
            clickable_link.bind("<Button-1>", lambda e, url=video_link: webbrowser.open(url))

        ttk.Label(self.scrollable_frame, text="Image:").grid(row=4, column=0, padx=10, pady=5, sticky="e")
        image_path = self.recipe["image"]
        if image_path:
            try:
                if image_path.startswith(('http://', 'https://')):
                    response = requests.get(image_path)
                    img = Image.open(BytesIO(response.content))
                else:
                    img = Image.open(image_path)
                
                img.thumbnail((300, 300))
                photo = ImageTk.PhotoImage(img)
                img_label = ttk.Label(self.scrollable_frame, image=photo)
                img_label.image = photo
                img_label.grid(row=4, column=1, padx=10, pady=5, sticky="w")
            except Exception as e:
                ttk.Label(self.scrollable_frame, text=f"Error loading image: {str(e)}").grid(row=4, column=1, padx=10, pady=5, sticky="w")
        else:
            ttk.Label(self.scrollable_frame, text="No image available").grid(row=4, column=1, padx=10, pady=5, sticky="w")

        # Comments
        ttk.Label(self.scrollable_frame, text="Comments:").grid(row=5, column=0, padx=10, pady=5, sticky="ne")
        comments_text = "\n".join(self.recipe["comments"])
        comments_label = ttk.Label(self.scrollable_frame, text=comments_text, wraplength=400)
        comments_label.grid(row=5, column=1, padx=10, pady=5, sticky="w")

        # Pack the canvas and scrollbar
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")

        # Export txt file button
        export_button = ttk.Button(self.window, text="Export txt file", command=self.export_recipe)
        export_button.grid(row=6, column=1, pady=10)

    def export_recipe(self):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text files", "*.txt"), ("All files", "*.*")])
        if file_path:
            with open(file_path, "w", encoding="utf-8") as file:
                file.write(f"Recipe: {self.recipe['name']}\n\n")
                file.write(f"Category: {self.recipe['category']}\n\n")
                file.write(f"Instructions:\n{self.recipe['instructions']}\n\n")
                file.write(f"Ingredients:\n{self.recipe['ingredients']}\n\n")
                file.write(f"Recipe link: {self.recipe['video_link']}\n\n")
                file.write(f"Image: {self.recipe['image']}\n\n")
                file.write("Comments:\n")
                for comment in self.recipe['comments']:
                    file.write(f"- {comment}\n")
            messagebox.showinfo("Success", f"Recipe exported to {file_path}")

if __name__ == "__main__":
    root = tk.Tk()
    app = MyCookBook(root)
    root.mainloop()
